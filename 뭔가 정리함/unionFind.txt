유니온 연산, 파인드 연산

유니온은 A와 B를 합친다. 파인드는 A가 가리키는게 무엇인가를 찾는다.

맨 처음에는 자신의 인덱스로 정의가 되어있고,
[0, 1, 2, 3, 4]

여기서 2랑 4를 유니온을 하면 아무튼 2랑 4가 같은걸로 판정이 되게 하고 싶다.
union(2, 4) -> [0, 1, 2, 3, 2]

그래서 find(4) == 2, find(2) == 2가 된다. 같은 그룹에 있는 것들은 find를 걸면 같은 값이 튀어나온다.

유파는 0 인덱스가 좋음

union(2, 3)을 걸면 [0, 1, 2, 2, 2]가 되어야 한다. 또는 [0, 1, 3, 3, 3]도 상관없고. 이건 유니온 알고리즘에 따라 달라짐

그럼 임시로 [0, 1, 3, 3, 2]로 됐다고 하자. 그러면 find(4) == 2가 된다. 그런데 find(2) == 3이네? 그럼 2가 루트가 아니다. 아 시바 이거 포레스트네

인덱스로만 구성된 단순한 벡터가 제일 만만하다. 자신의 인덱스와 값이 다른지 여부를 체크할 수 있는게 편하다.

지금 find는 O(N)이다. 그래서 find는 스스로의 데이터도 바꿀 수 있어야 한다.

std::vector<int> data;

int find(int idx)
{
    if (data[idx] == idx)
        return idx;
    // 트리의 높이를 죽여주는 부분 -> 이거때문에 시간복잡도가 역 아커만 함수까지 떨어진다고 한다. 자세한건 몰?루 아무튼 상수에 가까운 시간복잡도가 나온다.
    data[idx] = find(data[idx]);
    return data[idx];
}

void union(int a, int b)
{
    a = find(a), b = find(b);
    if (a != b)
    {
        if (a > b)
            std::swap(a, b);
        data[b] = a;
    }
    return;
}

https://leetcode.com/problems/redundant-connection/?envType=daily-question&envId=2025-01-29

이 문제에서는 union을 걸 때 bool로 a == b를 반환하면 된다.
