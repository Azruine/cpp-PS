{
    "Solver Class For PS": {
        "prefix": "solverclass",
        "body": [
            "/*==== Copyright 2025 Azruine ====*/",
            "",
            "#include <iostream>",
            "#include <ranges>",
            "#include <utility>",
            "",
            "using std::cin, std::cout;",
            "",
            "namespace {",
            "inline void fastio() {",
            "    std::ios_base::sync_with_stdio(false);",
            "    cin.tie(nullptr);",
            "    cout.tie(nullptr);",
            "}",
            "template <typename To, typename From>",
            "constexpr To as(From&& from) {",
            "    return static_cast<To>(std::forward<From>(from));",
            "}",
            "struct Range {",
            "    template <typename Start, typename End, typename Step = Start>",
            "    constexpr auto operator()(Start start, End end,",
            "                              Step step = 1) const noexcept {",
            "        return std::views::iota(start, end) | std::views::stride(step);",
            "    }",
            "};",
            "#pragma GCC diagnostic push",
            "#pragma GCC diagnostic ignored \"-Wunused-variable\"",
            "constexpr Range iota{};",
            "#pragma GCC diagnostic pop",
            "}  // namespace",
            "",
            "class Solver {",
            "public:",
            "    void solve() {}",
            "};",
            "",
            "int main() {",
            "    fastio();",
            "    Solver solver;",
            "    solver.solve();",
            "    return 0;",
            "}",
            ""
        ],
        "description": "Solver Class For PS"
    },
    "Leet Code": {
        "prefix": "leetcode",
        "body": [
            "/*==== Copyright 2025 Azruine ====*/",
            "",
            "#include <ranges>",
            "#include <utility>",
            "",
            "namespace {",
            "template <typename To, typename From>",
            "constexpr To as(From&& from) {",
            "    return static_cast<To>(std::forward<From>(from));",
            "}",
            "struct Range {",
            "    template <typename Start, typename End, typename Step = Start>",
            "    constexpr auto operator()(Start start, End end,",
            "                              Step step = 1) const noexcept {",
            "        return std::views::iota(start, end) | std::views::stride(step);",
            "    }",
            "};",
            "#pragma GCC diagnostic push",
            "#pragma GCC diagnostic ignored \"-Wunused-variable\"",
            "constexpr Range iota{};",
            "#pragma GCC diagnostic pop",
            "}  // namespace",
            ""
        ],
        "description": "Leet Code"
    }
}