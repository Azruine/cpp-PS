{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Solver Class": {
        "prefix": "solverclass",
        "body": [
            "#include <bits/stdc++.h>",
            "",
            "using ll = long long int;",
            "using ull = unsigned long long int;",
            "using ld = long double;",
            "",
            "#define 고속입출력                          \\",
            "    std::ios_base::sync_with_stdio(false); \\",
            "    std::cin.tie(NULL);                    \\",
            "    std::cout.tie(NULL);",
            "",
            "class Solver",
            "{",
            "private:",
            "",
            "public:",
            "    Solver()",
            "    {",
            "    }",
            "    ~Solver() {}",
            "    void solve()",
            "    {",
            "",
            "    }",
            "};",
            "",
            "int main()",
            "{",
            "    고속입출력;",
            "    Solver solver;",
            "    solver.solve();",
            "    return 0;",
            "}"
        ],
        "description": "Solver Class"
    }
}